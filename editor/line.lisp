(in-package #:org.shirakumo.fraf.kandria)

(defclass line (tool)
  ((start :initform NIL :accessor start)
   (stroke :initform NIL :accessor stroke)))

(defmethod label ((tool line)) "Line")

(defmethod handle ((event mouse-press) (tool line))
  (cond ((retained :control)
         (let* ((base-layer (aref (layers (entity tool)) +base-layer+))
                (original (copy-seq (pixel-data base-layer))))
           (with-commit (tool)
               ((auto-tile (entity tool) (vxy (mouse-world-pos (pos event)))
                           (cdr (assoc (tile-set (sidebar (editor tool)))
                                       (tile-types (tile-data (entity tool)))))))
               ((setf (pixel-data base-layer) original)))))
        (T
         (setf (state tool) (case (button event)
                              (:left :placing)
                              (:right :erasing)))
         (setf (start tool) (vcopy (pos event))))))

(defmethod handle ((event mouse-release) (tool line))
  (when (state tool)
    (let ((entity (entity tool))
          (stroke (stroke tool)))
      (commit (make-action (loop for (loc prev new) in stroke
                                 do (setf (tile loc entity) new))
                           (loop for (loc prev new) in stroke
                                 do (setf (tile loc entity) prev)))
              tool)))
  (setf (state tool) NIL)
  (setf (stroke tool) NIL))

(defmethod handle ((event mouse-move) (tool line))
  (when (state tool)
    (let ((entity (entity tool)))
      ;; First undo previous stroke
      (loop for (loc prev new) in (stroke tool)
            do (setf (tile loc entity) prev))
      ;; Cache underlying tiles and set new ones.
      (setf (stroke tool) (loop for (loc . slope) in (compute-line (start tool) (pos event))
                                for tile = (ecase (state tool)
                                             (:placing slope)
                                             (:erasing (list 0 0)))
                                collect (list loc (tile loc entity) tile)
                                do (setf (tile loc entity) tile))))))

(defun compute-line (start end)
  (let* ((a (mouse-tile-pos start))
         (b (mouse-tile-pos end))
         (tiles ()))
    (labels ((set-tile (tile)
               (let ((prev (first tiles)))
                 (if (and prev (v= a (car prev)))
                     (setf (cdr prev) (list tile 0))
                     (push (cons (vcopy a) (list tile 0)) tiles)))))
      (loop for deg = (atan (- (vy b) (vy a)) (- (vx b) (vx a)))
            do (set-tile 1)
               (cond ((= deg (atan 1 3)) ;; 3-tile slope
                      (incf (vy a) +tile-size+)
                      (set-tile 10)
                      (incf (vx a) +tile-size+)
                      (set-tile 11)
                      (incf (vx a) +tile-size+)
                      (set-tile 12)
                      (incf (vx a) +tile-size+))
                     ((= deg (atan 1 2)) ;; 2-tile slope
                      (incf (vy a) +tile-size+)
                      (set-tile 6)
                      (incf (vx a) +tile-size+)
                      (set-tile 7)
                      (incf (vx a) +tile-size+))
                     ((= deg (atan 1 1)) ;; 1-tile slope
                      (incf (vy a) +tile-size+)
                      (set-tile 4)
                      (incf (vx a) +tile-size+))
                     ((= deg (atan 1 -1)) ;; 1-tile slope
                      (incf (vy a) +tile-size+)
                      (set-tile 5)
                      (decf (vx a) +tile-size+))
                     ((= deg (atan 1 -2)) ;; 2-tile slope
                      (incf (vy a) +tile-size+)
                      (set-tile 9)
                      (decf (vx a) +tile-size+)
                      (set-tile 8)
                      (decf (vx a) +tile-size+))
                     ((= deg (atan 1 -3)) ;; 3-tile slope
                      (incf (vy a) +tile-size+)
                      (set-tile 15)
                      (decf (vx a) +tile-size+)
                      (set-tile 14)
                      (decf (vx a) +tile-size+)
                      (set-tile 13)
                      (decf (vx a) +tile-size+))
                     ((= (vx a) (vx b))
                      (incf (vy a) (* (signum (- (vy b) (vy a))) +tile-size+)))
                     (T
                      (incf (vx a) (* (signum (- (vx b) (vx a))) +tile-size+))))
            until (v= a b))
      (set-tile 1)
      tiles)))

