(in-package #:org.shirakumo.fraf.kandria)

(defmacro with-editor-error-handling (&body body)
  (let ((thunk (gensym "THUNK"))
        (handler (gensym "HANDLER")))
    `(flet ((,thunk ()
              ,@body)
            (,handler (error)
              (v:severe :trial.editor error)
              (alloy:message (princ-to-string error) :title "Error" :ui (unit 'ui-pass T))
              (invoke-restart ',handler)))
       (if (deploy:deployed-p)
           (with-simple-restart (,handler "Exit.")
             (handler-bind ((error #',handler))
               (,thunk)))
           (,thunk)))))

(defclass sidebar (single-widget)
  ((side :initarg :side :accessor side)
   (entity :initform NIL :accessor entity)
   (editor :initarg :editor :initform (alloy:arg! :editor) :accessor editor))
  (:metaclass alloy:widget-class))

(defmethod initialize-instance :before ((sidebar sidebar) &key editor)
  (setf (slot-value sidebar 'entity) (entity editor)))

(alloy:define-subobject (sidebar representation -100) ('alloy:sidebar :side (side sidebar))
  (alloy:enter (slot-value sidebar 'layout) representation)
  (alloy:enter (slot-value sidebar 'focus) representation))

(define-shader-entity marker (trial::lines standalone-shader-entity alloy:layout-element)
  ())

(defmethod alloy:render ((pass ui-pass) (marker marker))
  (alloy:with-constrained-visibility ((alloy:bounds marker) pass)
    (render marker NIL)))

(defmethod alloy:suggest-bounds (bounds (marker marker)) bounds)

(defclass editor (pausing-panel alloy:observable-object)
  ((flare:name :initform :editor)
   (marker :initform (make-instance 'marker) :accessor marker)
   (menu :initform NIL :accessor menu)
   (entity :initform NIL :accessor entity)
   (tool :initform NIL :accessor tool)
   (alt-tool :accessor alt-tool)
   (toolbar :accessor toolbar)
   (history :initform (make-instance 'linear-history) :accessor history)
   (sidebar :initform NIL :accessor sidebar)))

(alloy:define-observable (setf entity) (entity alloy:observable))

(defmethod register-object-for-pass (pass (editor editor))
  (register-object-for-pass pass (maybe-finalize-inheritance 'trial::lines)))

(defmethod initialize-instance :after ((editor editor) &key)
  (let* ((focus (make-instance 'alloy:focus-list))
         (layout (make-instance 'alloy:border-layout))
         (menu (make-instance 'editmenu))
         (toolbar (make-instance 'toolbar :editor editor :entity NIL))
         (entity (make-instance 'entity-widget :editor editor :side :west)))
    (setf (alt-tool editor) 'browser)
    (setf (tool editor) 'browser)
    (setf (toolbar editor) toolbar)
    (setf (menu editor) menu)
    (alloy:observe 'entity editor (lambda (value object) (setf (entity entity) value)))
    (alloy:enter menu layout :place :north :size (alloy:un 30))
    (alloy:enter menu focus)
    (alloy:enter toolbar layout :place :south :size (alloy:un 30))
    (alloy:enter toolbar focus)
    (alloy:enter entity layout :place :west :size (alloy:un 300))
    (alloy:enter entity focus)
    (alloy:enter (marker editor) layout :place :center)
    (alloy:finish-structure editor layout focus)
    (update-marker editor)))

(defmethod show :after ((editor editor) &key)
  (setf (entity editor) (region +world+))
  (setf (background (unit 'background T)) (background 'editor))
  (update-background (unit 'background T) T)
  (setf (lighting (unit 'lighting-pass T)) (gi 'none))
  (force-lighting (unit 'lighting-pass T)))

(defmethod hide :after ((editor editor))
  (hide (tool editor))
  (when (chunk (unit 'player T))
    (switch-chunk (chunk (unit 'player T))))
  (snap-to-target (unit :camera T) (unit 'player T))
  (issue +world+ 'force-lighting))

(defmethod (setf tool) :before ((tool tool) (editor editor))
  (let ((entity (entity editor)))
    (when (find (type-of tool) (applicable-tools entity))
      (trial:commit tool (loader +main+) :unload NIL)
      (when (and (tool editor) (not (eq tool (tool editor))))
        (hide (tool editor))))))

(defmethod (setf tool) ((tool symbol) (editor editor))
  (setf (tool editor) (make-instance tool :editor editor)))

(defmethod (setf tool) ((tool class) (editor editor))
  (setf (tool editor) (make-instance tool :editor editor)))

(defmethod (setf alt-tool) ((tool symbol) (editor editor))
  (setf (alt-tool editor) (make-instance tool :editor editor)))

(defmethod default-tool ((editor editor))
  (or (default-tool (entity editor))
      'browser))

(defmethod undo ((editor editor) region)
  (undo (history editor) region))

(defmethod redo ((editor editor) region)
  (redo (history editor) region))

(defmethod stage :after ((editor editor) (area staging-area))
  (stage (background 'editor) area)
  (stage (marker editor) area))

(defmethod (setf sidebar) :before ((null null) (editor editor))
  (let ((previous (sidebar editor)))
    (when previous
      (alloy:leave (sidebar editor) (alloy:layout-element editor))
      (alloy:leave (sidebar editor) (alloy:focus-element editor)))))

(defmethod (setf sidebar) :after ((sidebar sidebar) (editor editor))
  (alloy:enter sidebar (alloy:layout-element editor) :place :east :size (alloy:un 300))
  (alloy:enter sidebar (alloy:focus-element editor)))

(defun update-marker (editor)
  (let ((coords ())
        (selected (entity editor)))
    (flet ((add (color &rest vecs)
             (dolist (vec vecs)
               (push (list vec color) coords))))
      (for:for ((entity over (region +world+)))
        (when (typep entity '(and sized-entity (or chunk (not layer))))
          (let* ((p (location entity))
                 (s (bsize entity))
                 (ul (vec3 (- (vx p) (vx s)) (+ (vy p) (vy s)) 0))
                 (ur (vec3 (+ (vx p) (vx s)) (+ (vy p) (vy s)) 0))
                 (br (vec3 (+ (vx p) (vx s)) (- (vy p) (vy s)) 0))
                 (bl (vec3 (- (vx p) (vx s)) (- (vy p) (vy s)) 0)))
            (add (if (eql entity selected)
                     (vec 1 1 1 0.5)
                     (vec 0 0 0 0.5))
                 ul ur ur br br bl bl ul)))
        (when (and (typep entity 'door)
                   (primary entity))
          (add (vec 1 0 0 0.5) (vxy_ (location entity)) (vxy_ (location (target entity)))))))
    (replace-vertex-data (marker editor) coords)))

(defmethod (setf entity) :before (value (editor editor))
  (setf (sidebar editor) NIL))

(defmethod (setf entity) :after (value (editor editor))
  (update-marker editor)
  (setf (tool editor) (default-tool editor))
  (reinitialize-instance (toolbar editor) :editor editor :entity (entity editor))
  (v:info :kandria.editor "Switched entity to ~a (~a)" value (type-of editor)))

(defmethod handle :around ((ev event) (editor editor))
  (unless (call-next-method)
    (with-editor-error-handling
      (handle ev (cond ((retained :alt) (alt-tool editor))
                       (T (tool editor)))))))

(defmethod handle ((ev key-release) (editor editor))
  (let ((camera (unit :camera T)))
    (case (key ev)
      (:tab (setf (entity editor) (region +world+)) T)
      (:f1 (edit 'save-region T))
      (:f2 (edit 'load-region T))
      (:f3 (edit 'save-initial-state T))
      (:f4 (edit 'load-initial-state T))
      (:f5 (edit 'save-game T))
      (:f6)
      (:f7)
      (:f8)
      (:f9 (edit 'load-game T))
      (:f10)
      (:f11)
      (:delete (edit 'delete-entity T))
      (:insert (edit 'insert-entity T))
      (:w (incf (vy (location camera)) 5))
      (:a (decf (vx (location camera)) 5))
      (:s (decf (vy (location camera)) 5))
      (:d (incf (vx (location camera)) 5)))))

(defmethod handle ((event text-entered) (editor editor))
  (let ((camera (unit :camera T)))
    (case (char (text event) 0)
      (#\h (setf (location (unit 'player T)) (vcopy (location camera))))
      (#\c (edit 'clone-entity T))
      (#\b (setf (tool editor) 'browser))
      (#\f (setf (tool editor) 'freeform))
      (#\p (setf (tool editor) 'paint))
      (#\l (setf (tool editor) 'line))
      (#\r (setf (tool editor) 'rectangle))
      (#\z (edit 'undo editor))
      (#\y (edit 'redo editor))
      (#\u (setf (entity editor) (unit 'player T)))
      (#\+ (incf (alloy:value (slot-value (menu editor) 'zoom)) 0.1))
      (#\- (decf (alloy:value (slot-value (menu editor) 'zoom)) 0.1)))))

(defmethod handle ((event mouse-release) (editor editor))
  (when (and (eq (entity editor) (region +world+))
             (eq :left (button event)))
    (let ((pos (mouse-world-pos (pos event))))
      (setf (entity editor) (entity-at-point pos +world+)))))

(defmethod edit :around (thing (editor editor))
  (with-editor-error-handling
    (call-next-method)))

(defmethod edit :after (action (editor editor))
  (update-marker editor))

(defmethod edit (action (editor (eql T)))
  (edit action (find-panel 'editor)))

(defmethod commit ((action action) (editor editor))
  (redo action (unit 'region T))
  (commit action (history editor)))

(defmethod edit ((action (eql 'new-region)) (editor editor))
  (alloy:with-confirmation ("Are you sure you want to create a new region?" :ui (unit 'ui-pass T))
    (let ((old (region +world+))
          (region (make-instance 'region))
          (chunk (make-instance 'chunk)))
      (enter (make-instance 'background) region)
      (enter chunk region)
      (enter (make-instance 'player :chunk chunk) region)
      (enter region +world+)
      (setf (entity editor) region)
      (leave old +world+)
      (trial:commit +world+ +main+)
      (setf (background (unit 'background T)) (background 'editor))
      (vsetf (location (unit :camera T)) 0 0)
      (update-background (unit 'background T) T))))

(defmethod edit ((action (eql 'load-region)) (editor editor))
  (flet ((load (path)
           (load-region path T)
           (setf (background (unit 'background T)) (background 'editor))
           (update-background (unit 'background T) T)
           (clear (history editor))
           (setf (entity editor) (region +world+))
           (trial:commit +world+ +main+)))
    (if (retained :control)
        (let ((path (file-select:existing :title "Select Region File")))
          (when path
            (load path)))
        (alloy:with-confirmation ("Are you sure you want to reload the region?"  :ui (unit 'ui-pass T))
          (load (packet (region +world+)))))))

(defmethod edit ((action (eql 'save-region)) (editor editor))
  (if (retained :control)
      (let ((path (file-select:new :title "Select Region File" :default (storage (packet +world+)) :filter '(("ZIP files" "zip")))))
        (when path
          (save-region (region +world+) path)))
      (save-region T T)))

;; FIXME: This information does not belong here. where else to put it? world-v0?
(defmethod edit ((action (eql 'load-initial-state)) (editor editor))
  (with-packet (packet (packet +world+) :offset (region-entry (region +world+) +world+)
                                        :direction :input)
    (decode-payload (first (parse-sexps (packet-entry "init.lisp" packet :element-type 'character))) (region +world+) packet 'save-v0)))

(defmethod edit ((action (eql 'save-initial-state)) (editor editor))
  (with-packet (packet (packet +world+) :offset (region-entry (region +world+) +world+)
                                        :direction :output)
    (with-packet-entry (stream "init.lisp" packet :element-type 'character)
      (princ* (encode-payload (region +world+) NIL packet 'save-v0) stream))))

(defmethod edit ((action (eql 'load-game)) (editor editor))
  (if (retained :control)
      (let ((path (file-select:existing :title "Select Save File" :default (file (state +main+)) :filter '(("ZIP files" "zip")))))
        (when path
          (load-state path T)))
      (load-state T T))
  (trial:commit +world+ +main+))

(defmethod edit ((action (eql 'save-game)) (editor editor))
  (if (retained :control)
      (let ((path (file-select:new :title "Select Save File" :default (file (state +main+)))))
        (when path
          (save-state T path)))
      (save-state T T)))

(defmethod edit ((action (eql 'delete-entity)) (editor editor))
  (let* ((entity (entity editor))
         (container (container entity)))
    (cond ((typep entity 'player)
           (v:warn :kandria.editor "Refusing to delete player."))
          (T
           ;; FIXME: Clean up stale data files from region packet
           ;;        Should probably do that as an explicit command to invoke at some point.
           ;;        Maybe at deploy time?
           (with-commit (editor)
             ((leave* entity container)
              (setf (entity editor) (region +world+)))
             ((enter-and-load entity container +main+)
              (setf (entity editor) entity)))))))

(defmethod edit ((action (eql 'insert-entity)) (editor editor))
  (make-instance 'creator :ui (unit 'ui-pass T)))

(defmethod edit ((action (eql 'clone-entity)) (editor editor))
  (let ((loc (vcopy (closest-acceptable-location (entity editor) (location (unit :camera T))))))
    (edit (make-instance 'insert-entity :entity (clone (entity editor) :location loc)) editor)))

(defmethod edit ((action (eql 'undo)) (editor editor))
  (undo editor (unit 'region T)))

(defmethod edit ((action (eql 'redo)) (editor editor))
  (redo editor (unit 'region T)))

#+(OR)
(defmethod edit ((action (eql 'inspect)) (editor editor))
  #+swank
  (let ((swank::*buffer-package* *package*)
        (swank::*buffer-readtable* *readtable*))
    (swank:inspect-in-emacs (entity editor) :wait NIL)))

(defclass insert-entity () ((entity :initarg :entity :initform (alloy:arg! :entity) :accessor entity)))

(defmethod edit ((action insert-entity) (editor editor))
  (let ((entity (entity action))
        (*package* #.*package*))
    (trial:commit entity (loader +main+) :unload NIL)
    (with-commit (editor)
      ((enter* entity (unit 'region T))
       (setf (entity editor) entity))
      ((leave* entity (unit 'region T))
       (setf (entity editor) (region +world+))))))
